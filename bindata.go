package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _templates_commands_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5b\x73\xdb\xb8\x15\x7e\x26\x7f\x05\x96\x93\xec\x90\xb1\x4c\x65\xb7\x3b\x7d\x50\x57\x9d\x71\x9c\x8b\x33\x13\x3b\xae\x65\x6f\x1e\x5c\x4f\x03\x93\x47\x12\xc6\x24\x40\x83\x90\x2f\xd5\xf2\xbf\x77\x0e\x00\x52\xe0\x45\xb2\x9d\xf6\xa5\x2f\x09\x85\xdb\xb9\x7f\xe7\xe2\xf1\x98\x1c\x8a\x14\xc8\x02\x38\x48\xaa\x20\x25\xd7\x8f\x44\x14\xc0\x69\xc1\xf6\x93\x8c\xed\xdb\x0d\x21\x63\xf2\xfe\x2b\x39\xf9\x7a\x4e\x3e\xbc\xff\x7c\x1e\xfb\xe3\x31\x99\x01\x90\xa5\x52\x45\x39\x19\x8f\x17\x4c\x2d\x57\xd7\x71\x22\xf2\xb1\x64\x0b\x50\x8a\x8d\x07\x5f\xf1\xfd\x82\x26\x37\x74\x01\x64\xbd\x26\xf1\xa9\xf9\x3e\xa1\x39\x90\xaa\xf2\x7d\x96\x17\x42\x2a\x12\xfa\xde\x7a\x4d\xd8\x9c\xc4\x9f\xf5\x42\x19\x7f\xcc\x15\xa9\xaa\x60\x9e\xab\x60\xbd\x26\xc0\x53\x3c\xde\x3d\x34\x53\x92\xf1\x45\x89\x07\x4b\xf3\xb9\xe3\xf0\x39\xd3\x34\x03\xc5\x72\x70\x8e\xf9\x5e\xf0\x5c\x51\xc6\x49\xc6\x82\xf6\xf9\xe2\x66\x31\x06\x29\x85\x2c\x3b\x1b\xb2\x1c\xff\x1b\xa4\xc8\xc4\x62\x9c\x89\x45\x67\xb3\x2c\xe6\xbf\xfc\x65\x9c\x88\x6b\x49\x07\x77\xee\x58\x01\x52\xef\x88\xe2\x66\x11\x33\x3e\x5e\xfe\xca\x05\x1f\x2f\x80\xab\x0c\x72\xca\xe3\xbb\x5f\x03\x3f\xf2\xfd\xf5\x9a\xa4\x30\x67\x1c\x48\x50\x50\x49\xf3\x32\xb0\x92\xef\x13\x49\xf9\x02\x48\xfc\xb5\x50\x4c\x70\x9a\x9d\xea\x6d\xbd\xab\xb7\xd9\x9c\xc0\x2d\x89\xcf\x1f\x0b\x20\xc1\xb5\x10\x19\x50\x6e\x2e\x7b\x5e\x92\xa7\xf1\xc7\x8c\x2e\xca\x30\x8a\xdf\x09\x91\x85\xa8\xae\xf8\xf0\xcb\x67\x6b\xb6\x60\x44\xe6\x34\x2b\x61\x44\xb4\x1e\xcb\x84\x16\x30\x53\x92\xc4\xef\xa1\x4c\x24\xd3\x14\xf1\x58\x64\x69\x41\x56\x42\x9b\x20\xe3\xea\xaf\xbf\x0d\x91\xfb\x8c\x1b\x03\xf4\xde\xfe\x38\xad\x79\x26\xe8\x16\x6a\x1f\xcd\xd6\x10\xbd\xf8\x65\x14\xfb\x6f\x1b\xdf\x1c\x78\x3a\x08\x9e\xfd\x72\xe3\xc8\xfb\x1b\x6f\x75\x6c\xfb\x8d\x32\x05\xd2\x1a\xb5\x6f\xb4\x7b\xca\xd4\x3e\x92\x37\xe7\xb6\x1a\xb0\xde\x9f\x2d\x31\x14\x0d\xfd\x16\xc9\x24\x63\xf1\x0c\xd4\xe1\xaa\x54\x22\x37\x34\x92\x3c\x8d\x7c\xdf\x63\x73\xe2\xd2\x3d\xa2\xa5\xfd\x24\x6b\xdf\xf3\x8c\x4b\xc6\xef\x18\x4f\x4f\x9b\x6b\xf5\xe1\xc8\xf7\x2a\xdf\x09\xc3\xf5\x9a\xbc\xe2\xc8\xde\x64\x4a\xe2\x1a\x1f\x70\x91\x16\x4c\xaf\x7d\x12\x9d\xd5\xd3\xd5\x75\xc6\x12\xbd\x67\x3e\xdb\x27\x12\x91\xe7\x94\xa7\x27\xf5\x9b\x87\xce\x6f\x24\x78\x47\x25\xa9\xdf\xaf\xaa\xd9\xea\xda\x5e\x20\x18\x0d\xbe\x3f\x5f\xf1\xc4\xdd\x07\x79\x07\x12\x25\xbb\xbc\xca\x69\x71\x69\xf0\xe6\xca\xfc\x87\xd2\x4a\x50\x2b\xc9\x87\x76\xd7\xda\x9c\xd6\x68\xaf\x4a\xfd\x90\xe6\xc8\xbe\x69\x9d\x67\xf0\x9e\xe7\x05\xe9\xc6\x39\x82\x89\x36\x98\x7d\xa3\xeb\x36\x23\x73\x7e\x25\xb3\xce\xb9\x8b\xb3\x2f\xcd\x7e\x35\x32\xdc\xd4\xbe\x55\xf9\x46\xf7\x96\x3b\x51\x20\xd4\xe1\x83\xc8\xe0\xd7\xfa\x97\xe1\x71\x3c\x26\x6d\xd5\x57\x15\xba\x4f\xa3\x76\x8d\xf0\xb5\x17\xf9\x9e\xab\xc1\xe1\x0b\x61\x43\x38\x3e\x83\xdb\x15\x93\x90\x36\x38\xd5\x7e\xd9\x68\x64\x44\x1a\xce\x8d\x6f\x91\x37\x1a\x2a\xe3\x3f\xf0\x5f\x8b\xf7\x87\x94\x1f\xd1\x3b\x78\x27\xd2\x47\x52\x55\x23\x72\x8d\x1f\x56\xa3\xf5\xed\x88\x84\x6f\x36\x60\x7a\x06\x65\x21\x38\x86\x03\x12\x3d\xd3\x86\xd4\xd8\x81\xd7\x35\xba\x1b\x7f\x5e\x52\x9e\x66\x20\x4f\xa9\x5a\xa2\x7a\x74\xec\x1c\x99\xb5\x3a\xb0\x7c\x0f\x63\x62\xd0\xad\xb4\x39\xdd\x27\xcc\x0b\x2d\x3f\xad\x2a\x12\x90\x3d\xe2\x9c\xf2\x3d\x0f\x43\xd0\xdb\xb8\x0d\x46\xe3\xd9\x8a\x1f\x0a\x3e\x67\x8b\xf8\x13\xa8\x53\x29\xe6\x2c\x83\x30\x8a\x0f\x0a\x76\x71\xf6\x05\x8f\xaf\x64\x86\x67\xcd\xad\xbd\xc0\xa4\x5e\xb5\xd4\x2c\x5a\x74\xb1\x16\x67\x23\xf2\x4a\x2b\x53\x5b\xbc\x67\x06\x64\x7a\x93\x2f\xcc\xc9\xf8\x33\xc7\x7c\xa3\x96\x35\xa6\x6a\x72\x53\xab\xe4\x32\x3e\x83\x22\xa3\x09\x84\x2b\x99\x69\x84\xf9\xbe\xfe\xae\xed\x69\x6f\x5b\x49\xd7\xeb\xef\xd5\x77\x8d\x45\x9b\xad\xc6\xe0\x23\xf2\x4b\x54\x93\xae\x5d\xb5\x0d\x4a\x9e\x84\xdb\x5a\x1d\x87\x19\x03\xae\x62\x94\xf2\x18\xd4\x52\xe0\x91\x30\x42\xbf\x47\x1e\x22\xbf\x15\x80\xcf\x12\xb8\x2f\xef\xed\x0a\xe4\x63\x23\x30\x12\x9f\x12\x09\xb7\xf1\x41\x9a\xfe\x03\xb7\x0c\xd2\x6f\x00\x76\x40\x28\x2b\x91\x9b\xa3\x1c\x02\x4b\xa0\x29\xc8\x61\x0a\x47\x7a\xef\x25\x24\x36\x3a\x73\x54\xf6\x44\x5d\xe0\xb5\x63\x6e\x32\x25\x16\xc1\x3f\x81\xc2\x2d\x1d\x13\x7f\x12\xc5\x54\xa6\xa3\xb7\x9b\xdb\x34\x71\xe3\xfe\xce\x33\x3f\x4d\x49\x7d\xf9\x84\x65\x1a\x26\xb4\x80\x4e\x15\xd2\xd7\xef\x33\x14\x3c\xcf\x55\x3c\x2b\x24\xe3\x6a\x1e\x06\xaf\xef\x8c\x3e\x1c\x4d\x44\x0d\x15\xb7\x26\x18\xd0\xf4\x73\x54\xfd\x02\x62\xb5\xe6\xbd\xbe\xcb\x0e\x22\x94\x55\x9a\x86\xa9\x9f\xa6\x24\x08\xac\x7e\x06\xb9\x3a\x14\x5c\x01\x57\xfb\xa8\x4d\x5b\x47\xc4\xc7\x90\x32\x6a\xf1\x2a\xc0\xe4\x9f\x3e\xda\xe2\x03\xdf\x8c\x36\xac\x38\x9c\x60\xd4\x18\xe8\x7a\x07\x73\x21\x21\x74\x20\x67\x64\xcd\x3e\x42\xe2\x91\x09\xb5\xb2\xd0\x48\x88\x3e\x81\x1c\xbd\x17\x61\x64\xa0\x0e\x17\x7f\x9a\x12\xce\x32\xc3\xb6\x4d\x83\x9c\x65\x23\xf3\x8f\xa9\x8e\xe3\x6f\x92\x16\x21\x48\x39\x22\x01\x86\x1c\x94\x8a\xcc\x29\xcb\x20\xd5\x5e\xa3\x79\xc2\x84\x9c\x42\x22\x52\x48\xfb\x40\xec\x1b\x72\xc8\x49\x3c\x53\x54\xad\x4a\xdd\xc5\xfc\x4e\x7e\x7b\xfb\xd6\x50\xb6\xcc\x58\x48\xb8\xe0\x39\x95\xe5\x92\x66\x35\xb8\x87\x46\x88\x9f\x2d\x85\xe8\x6f\x3d\xd6\x9f\xc3\x7b\xf3\x6c\x86\x69\x5f\xda\xb7\x5d\x51\xb4\xae\x2b\xe3\x73\x3b\x35\xf2\x01\xff\x9b\x87\xc1\xd1\xf9\xf9\x29\x79\x9d\x4e\xc8\xeb\x32\x18\x75\x05\x6c\x16\xb4\x3d\xa3\x46\x57\x74\xae\x36\xd9\xc0\x18\xf2\x00\x97\xb6\xd9\x11\x45\xaf\x25\x37\x9a\x34\x2f\xb8\xf2\xd7\xba\x9f\x9a\x3d\xe3\xac\x1c\x5a\x86\xc0\xca\x1d\xe4\x9c\x26\xb0\xae\x30\x80\xe2\xb0\x67\xa9\xc8\x85\x1f\x8b\xd4\x5a\x03\x2d\x2e\xb4\x2e\xfa\x25\xa0\xc5\xe8\x7b\x5d\x91\x6a\x80\x76\x8b\xdc\x17\x55\x14\x4d\xf1\xf2\xbf\xa8\x2d\x22\x63\x35\xad\x28\xaa\x14\xe4\x85\x42\xee\xde\xfa\x9e\x37\x17\x92\xd4\x4b\xbf\x6b\xee\x0c\xf7\xf1\x81\x59\x2c\x1b\xc8\xb3\xa7\xf6\xf6\x7c\xe3\x17\x2d\x75\x58\xdf\x1d\x92\x6e\x23\xc9\x7f\x23\x67\x4f\xc0\xc8\x89\x9a\xa1\x38\xe8\x7b\xff\xa1\x58\x65\x29\xe1\x42\x91\x84\x66\x19\xb1\x56\x6a\x6a\xc6\xda\xff\xf1\x5f\x0c\x66\x9a\xa8\x15\xcd\x88\xe3\x32\xf5\x4e\x4e\x55\xb2\x34\x85\xb6\xe7\xe6\x66\xbd\x6e\x0d\x7f\x6c\xbe\xeb\xdc\xe4\x99\xd7\x8c\xa2\x8c\xdf\x7f\x02\xa5\x0f\xfd\x41\xb3\x95\x89\xef\x58\xe3\xe3\x83\xb2\xc8\x38\x83\x0c\x12\x65\x10\xdc\xa6\xb2\x83\x2c\x9b\x61\x87\xcf\xb1\x07\x69\xc5\xc4\xb0\x2e\x9e\xa3\x8c\x05\x28\x52\x73\x7e\x87\xbc\x18\x45\x58\x4d\x78\x7a\xcb\xe5\x5b\x33\x6d\x32\xcc\x39\x02\xa1\xe6\xef\xf2\xea\xfa\x51\x81\x0e\xa7\x0f\x0f\x05\x24\x0a\x52\xf2\x27\x31\x29\x87\x04\xaf\x6f\x31\xda\xa2\x91\xd5\xe9\x8f\xf0\xfb\xcd\x72\x68\x74\x8f\x88\xb5\x92\x0d\xa7\x4d\x8e\x34\xbb\xf6\xad\xa6\x0e\xd2\x88\x84\xbd\xb4\xbd\xd5\xa4\xce\x0e\xb9\x1a\xd3\x4c\xd0\x92\x84\x72\xd4\x8f\x04\x9a\x2c\x49\x0a\x25\x3a\x27\x29\xf5\x53\xd7\x90\xd0\x55\x09\xe4\x75\x49\x58\x69\xa0\xaf\x67\xb2\xdd\xba\x68\x58\x74\x1a\x70\xcf\xf3\xae\x25\xd0\x9b\xcd\x5e\x93\x8d\xbd\xaa\x5d\x1a\xe1\x2f\xc5\x72\x88\x67\x19\x40\xa1\xf5\xfe\x1e\x32\x8a\x19\xf9\x8d\x59\x87\x44\xf0\xb4\x41\x5c\x84\x4c\x1b\xe5\x7f\x9f\xee\x0c\xf3\xb6\x4a\x4e\xe0\x3e\x0c\x8e\xe9\x03\xcb\x57\x79\xfd\x42\x49\xe0\x21\x01\x48\xdd\xec\xb7\x49\x13\x1d\x54\xec\x34\xa2\x67\xb0\x60\x25\x22\x7d\xd9\xee\x58\x23\x12\x4a\x21\x14\x79\xa3\xc7\x4a\x75\xb7\xab\x1b\x17\xbd\x6e\x1b\x07\x21\x94\xe9\xdb\xcb\x76\x67\x62\xcf\xfc\xdc\xba\xad\xc5\xb9\x28\xc1\xb4\x93\x9d\x0e\xda\xf4\x93\xba\xdd\xb3\xfb\xe7\xb6\x30\x34\x3b\x5f\x04\x5f\x4c\xac\xbf\xcb\x9b\x54\xdc\x73\xe3\xf2\xdd\x61\xc7\xc8\x6f\xea\x93\x7e\xd3\x34\x25\x4a\xae\xc0\x77\x13\x6a\x2d\x86\xed\x34\xa7\x1d\xda\xee\x09\x64\xa1\x89\xb9\x5d\x3c\xf8\x9e\x19\xad\xe8\xf2\xac\x35\x56\x41\x23\x23\x1c\x6d\x55\x0c\x1e\x68\xab\x02\xef\x13\x9d\x15\x48\x02\x52\x51\xc6\x09\xdc\x01\x57\x44\xc8\xc6\xf9\xb1\xe6\x22\xc6\xe4\x8c\x2f\x5c\x85\x05\xef\x32\x91\xdc\xa0\x87\x40\xb2\xd2\x0c\xa2\x1e\x56\x25\x94\xa4\x10\xa6\xec\x50\x82\x14\x20\x99\x48\x19\xc2\xf0\x23\x49\x96\x90\xdc\xfc\x00\xc5\xca\xda\x1d\x0b\x4c\x2b\x58\x88\xe2\x74\x1a\xa6\x2d\xc9\xd8\x33\xe9\xd8\xce\x7a\xea\x69\x0f\x1e\x33\x79\x13\x1d\xdf\x04\x69\x92\xa7\x5b\x54\xe8\x7a\xd7\x45\xb9\xf1\x9d\xa6\x3b\x88\x0f\x32\x46\x51\xf6\x26\xbe\xed\xc2\x84\x5c\xb6\xc6\x24\x5e\xab\xbb\xe9\xdd\xf2\x3c\x4d\xc3\x21\xd0\xad\xd6\xeb\xd9\xc8\xc0\x86\xeb\xe3\xcd\x90\xcc\x9e\xdd\xe6\xe5\xda\xf5\x6a\xf7\x46\xb6\xe5\xa2\x9c\x10\xa3\x81\x63\xc6\x11\x0d\x4e\x70\x0d\x81\x27\x03\xbe\x33\x8d\xd7\x6f\x9c\xad\xf8\x84\xa0\xd2\x43\xd4\x68\x3b\xd0\x47\x84\xca\x45\xd9\x28\xa5\x36\x8a\x5b\x16\x3f\xb3\x70\x7a\xf5\xd0\x6a\x90\x77\xf0\x85\x14\x2f\xf1\xd5\x07\x52\x55\x57\xfd\xfa\x62\xa0\xc4\xf6\x3c\x2f\x13\x8b\xf8\x23\x55\x34\x0b\x23\xcc\x17\x98\x9d\xa2\xf8\xb8\x5c\x84\x81\xce\x1e\xba\xaa\x40\x0f\x8d\x6a\xab\xf8\xae\x71\xcc\x2f\x3c\xe3\x7a\xad\x1d\x47\x1a\x80\x47\x88\xcd\x74\xba\xaa\x67\xe2\x1b\x21\xea\xd6\x2c\x8c\xda\x63\x30\x37\x2f\x3c\x73\x1a\xd6\x76\xff\x61\xef\xaf\xeb\x1d\x78\xa0\x79\x91\x41\x69\x6b\x4d\xbf\x5d\xf5\xc0\x83\x7e\xff\x43\x7d\xc8\xfa\x5d\x73\x69\x6f\x4a\x02\xa2\x07\x43\x0d\xb2\x59\xc1\xb1\xcc\x0f\x23\xb2\x47\x02\x6d\xdd\x86\x5f\x1b\x4c\x7a\x11\xd0\x3a\xff\xe4\x41\x3f\xfd\xed\x88\xcb\x2d\x61\xb9\x2d\x2a\xb7\x06\xe5\xce\x98\xec\x85\x64\x37\xf0\xaa\xd1\x40\x5b\xbd\x2b\x1c\x9f\x19\x8d\xb5\x18\x47\x2c\x4d\x81\x37\xe4\xcc\xcf\x89\xae\x3b\x9a\xad\x41\x16\xac\xa9\x26\x8d\x61\xcd\xa9\x27\x83\x7c\x5b\x68\xff\x48\x64\xd7\x42\xf4\xa7\x09\x9e\x87\x8d\xff\xc8\x6d\x87\x3f\x81\xc2\x03\x61\x7f\x60\x60\x9e\xbf\x1c\xe6\xb0\xaa\x26\x57\x36\x0e\x07\x8b\xcd\x1d\xc1\x7c\xc1\xe9\x75\x06\x98\xab\xb0\x3c\x46\x86\xea\x88\xae\x7a\x28\xeb\x56\x9b\xf1\x09\x40\x5a\xd6\x5d\x3b\xa9\x2a\xac\xeb\x37\x55\xde\xbf\x1a\x17\x7e\x5e\xef\xf4\x34\xc0\xbd\x14\xd6\x76\x8c\x99\x37\xf3\xe5\x1f\xd3\x99\x01\xc0\xc4\x4e\x17\x3a\x7d\x55\xd3\x4f\x74\x26\x1d\x1f\x85\xcc\xb1\xae\x94\xf6\x2b\xdc\x31\xe1\xd8\x45\xdc\xbe\x83\x94\xdd\x71\xc6\x86\xec\x50\x79\x64\x5a\x80\xdb\xd3\x06\xfd\x86\xda\x2c\xbf\x09\xef\xc1\x19\xac\x03\x5b\x83\xd3\xd8\x16\x8d\xcb\xa0\x37\x48\x0e\xae\xc8\xb4\x71\xe2\x57\x58\x40\x5e\x6d\x08\xb6\x3c\x6c\x47\x57\x3a\xe8\x8f\xc3\x7f\x69\xb3\x26\xd8\xcc\x46\x9f\xfc\x73\xdb\x26\x1b\x7b\xf7\xdb\x13\x45\x9b\xa6\xf6\xd2\x52\x77\x43\xc2\x14\x5f\x88\x24\x6e\x45\xf3\xf2\x86\x78\xf3\x9e\x0e\xfc\x46\xa9\x9d\x3e\x78\xbb\xeb\xee\x74\xa0\xa7\x1b\x62\xd7\x9b\x50\x00\xb9\xa8\xc3\x0c\x05\xec\xcf\x58\xdd\x66\x77\xc8\x42\xed\x3f\x64\xa4\x5d\x85\xf5\xbc\xe8\xff\x5f\x65\xd6\x7d\xe2\x19\x28\x8d\xe5\xaf\x58\x6a\x41\xfc\x49\x55\xed\x2e\x04\xad\xd3\x6e\x83\xcb\x21\x47\x74\xcc\xe7\x80\xe4\xfd\xce\xe2\x6f\x87\x2e\xec\xcc\x40\xb7\xcd\x1b\xe1\xab\x76\x15\xd8\xc9\xc3\x26\x3b\xeb\xef\x6e\x23\xd3\x94\x84\xc3\x15\xa1\x1d\x4f\x86\x91\x5b\xfb\xd9\x26\xdc\xaf\xfc\xff\x04\x00\x00\xff\xff\x01\x62\xe7\xd9\x26\x23\x00\x00")

func templates_commands_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_commands_tmpl,
		"templates/commands.tmpl",
	)
}

var _templates_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x41\x6f\xf2\x38\x10\x3d\x27\xbf\xc2\x9f\x25\x56\xb1\x96\x2f\x61\x6f\x2b\x24\x0e\x6c\x81\x82\xd4\x16\x04\xb4\xd7\xca\x4d\x26\xc1\xaa\x63\x47\xf6\x04\x2a\x55\xfc\xf7\x95\x13\x43\x02\xdd\xd3\x72\x89\xed\x37\x7e\xf3\xe6\xcd\x98\x8a\xa7\x9f\xbc\x00\xf2\xfd\x4d\xe2\x4d\xbb\x7e\xe1\x25\x90\xf3\x39\x0c\x45\x59\x69\x83\x24\x0a\x09\x21\x84\xe6\x25\xd2\x76\x25\x75\xe1\x57\xa6\x56\x28\x4a\xf0\x3b\x6d\xfd\xc2\xa2\x11\xaa\xb0\x34\x0c\x03\x5a\x08\x3c\xd4\x1f\x71\xaa\xcb\xc4\x88\x02\x10\x45\xa2\x2b\x50\xbc\x12\xbf\x53\x29\x7e\x17\xa0\xc0\x70\xd4\x26\x49\xa5\xa0\x21\x0b\xc3\xbc\x56\x29\x29\xb9\x50\x11\x23\xdf\x0d\x5f\xaa\x55\x2e\x0a\x32\x9e\x90\x3f\x52\x29\xe2\x87\x66\xdb\x42\xee\x37\xad\x2a\x27\x79\xec\x32\xbb\x32\xbc\x7e\x3a\xbc\x46\xbc\x81\xb1\x42\xab\x26\xe2\xaf\x78\x14\x8f\x7a\xd8\x5c\x1d\x37\x06\x72\xf1\x35\xee\x6e\xcf\xd5\xb1\x23\x38\xb7\x1a\xa4\x88\x57\x4a\x60\xd4\x8a\x61\x61\x73\x9a\x41\xce\x6b\x89\xd6\x69\x73\x11\x2f\x70\x7a\x94\xfa\x83\xcb\x85\xe4\xc5\xcc\x83\x11\x3d\x20\x56\xe3\x24\x91\x3a\xe5\xf2\xa0\x2d\x8e\xff\x1e\x8d\x46\x94\x35\x14\xc5\x35\xde\x0e\x7b\x9b\x1d\xe0\x90\x80\x31\x17\xe6\x67\xfe\x09\x53\x95\x6d\xb8\xb1\xd0\xa5\xb0\xd1\x45\x41\x4b\x26\xf2\xe6\xce\xaf\x09\x51\x42\x92\xce\x22\xa9\x8b\x78\xc1\x91\xcb\x08\x8c\x61\xbe\xac\xe6\x93\x24\x64\xbf\x9e\xad\xc7\x64\x9a\x65\xc4\x40\x21\x2c\x82\x21\xa9\x2e\x4b\xae\x32\x4b\x0e\x60\x20\x6e\x23\x1d\xf1\xe4\xea\x43\xdb\x84\xda\x70\x14\x5a\x45\x3f\x9c\x23\x05\xe0\x7e\xfd\xfc\xb4\x10\x12\x36\x1c\x0f\x11\xb5\xae\xf5\x6e\x28\xd8\x7f\x82\xa9\x01\x6c\xb1\xae\xb8\xff\x53\x53\xe0\x04\x6e\xb5\xc6\x78\x9a\x65\x0f\x6d\x19\x51\x18\x5c\x5a\xf8\x4f\x2d\x64\xb6\xf3\x52\x3c\x6c\x23\x36\xec\x83\x8d\x94\x1e\x76\x77\x7b\x09\xb2\x6a\xab\xbf\xd0\xdf\x4c\x5d\x9f\xcb\x85\xae\x54\x55\xe3\x25\xd2\x91\xf9\xd1\xb9\xea\xdc\xb8\xe1\xb4\x08\x0a\xdb\x8e\x32\xa7\xdc\x8f\x40\x74\x33\x10\xac\x5f\xde\xfc\x0b\xd2\x1a\x21\x62\xe1\xd9\xbf\x99\x7b\x57\x73\x21\x41\x39\x55\xed\x73\x64\xfe\xeb\x2d\x04\x75\x7c\xe3\xb2\x06\x37\x60\xda\xc6\x8f\x80\xa0\x8e\x91\x7f\xb9\xf1\x5e\xbf\x56\x15\x98\x28\x2f\x31\xde\x55\x46\x28\xcc\x23\x3a\xb0\xef\x03\xfb\xbe\x99\xee\x97\x74\xf8\xf3\xb1\x90\x4b\x3e\xc6\xba\xc6\x5d\x92\xfc\x9a\x10\x4a\x7b\xcd\x33\x80\xb5\x51\x57\xbc\xf7\xd0\x3c\x72\x97\x38\x89\x07\x36\x19\xd8\x18\x75\x29\xe9\x90\xd4\x16\xcc\x52\x97\x30\x13\xc6\x35\xaf\x53\xfd\xa4\x4f\x60\x7e\x8c\x23\xeb\x89\xbb\xda\x75\xc3\xd1\x79\x13\x88\x9c\xf8\xbf\xb5\xf8\x71\xbd\xde\x91\xc9\x84\xd0\x93\x50\x99\x3e\x59\x57\x41\x10\x1c\x74\x79\xe7\x1a\x5d\xae\x9f\xe7\xb3\xed\xea\x6d\x4e\x19\xf9\xf3\x1e\x68\x0c\x63\x61\xe0\x98\x9b\xbb\x13\x6f\x46\xe0\xb9\x6e\xa8\x5e\x77\xf3\xed\x66\xbb\x5e\xac\x9e\xe6\xcd\xa5\x73\x18\x04\xde\x13\x17\x1c\xba\x03\xbf\xbf\xcb\x43\x5d\x6d\xff\x06\x00\x00\xff\xff\x8c\xb7\xe1\x63\xd0\x05\x00\x00")

func templates_main_tmpl() ([]byte, error) {
	return bindata_read(
		_templates_main_tmpl,
		"templates/main.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"templates/commands.tmpl": templates_commands_tmpl,
	"templates/main.tmpl": templates_main_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"commands.tmpl": &_bintree_t{templates_commands_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{templates_main_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
